//--------------------------------------------------------------------------------------------------
// <date>{{Date}}</date>
// <auto-generated>
//    This code was generated from a template.
//    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// <auto-generated>
//--------------------------------------------------------------------------------------------------

using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System;
using System.Diagnostics;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;
using System.Collections.Generic;

namespace {{Namespace}};

public interface I{{Name}}Client
{
    {{#Services}}
    I{{Name}}Client {{Name}} { get; }
    {{/Services}}
}

{{#Services}}
public interface I{{Name}}Client
{
    {{#Operations}}    
    {{#if IsFileRequest}}
    Task<{{ResponseType}}> {{Request}}Async({{Request}} request, params File[] files);
    {{else}}
    Task<{{ResponseType}}> {{Request}}Async({{Request}} request);
    {{/if}}
    {{/Operations}}

    {{#Operations}}
    {{#if IsFileRequest}}
    {{ResponseType}} {{Request}}({{Request}} request, params File[] files);
    {{else}}
    {{ResponseType}} {{Request}}({{Request}} request);
    {{/if}}
    {{/Operations}}
}

{{/Services}}

{{#Definitions}}
{{Code}}

{{/Definitions}}

public class File
{
    public HttpContent HttpContent { get; set; }
    public string Filename { get; set; }
    public static File Create(byte[] data, string filename, string contentType)
    {
        var content = new StreamContent(new System.IO.MemoryStream(data));
        content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(contentType);
        return new File
        {
            HttpContent = content,
            Filename = filename
        };
    }
}

internal class JsonRpcClient
{
    private readonly System.Net.Http.HttpClient _httpClient;

    public JsonRpcClient(System.Net.Http.HttpClient httpClient)
    {
        _httpClient = httpClient;
        _httpClient.DefaultRequestHeaders.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    }

    internal static HttpContent CreateContent(string methodName, object request, IEnumerable<File> files)
    {
        var jsonRpcRequest = new
        {
            id = Guid.NewGuid().ToString(),
            jsonRpc = "2.0",
            method = methodName,
            @params = request
        };

        var payload = JObject.FromObject(jsonRpcRequest).ToString();
        
        if (files is not null && files.Count() > 0)
        {
            var multipartContent = new MultipartFormDataContent("mydata");
            multipartContent.Add(new StringContent(payload, Encoding.UTF8, "application/json"), "jsonRpc");

            foreach (var file in files)
            {
                multipartContent.Add(file.HttpContent, "files", file.Filename);
            }

            return multipartContent;
        }
        else
        {
            return new StringContent(payload, Encoding.UTF8, "application/json");
        }
    }

    public T Send<T>(string methodName, object request, IEnumerable<File> files = null)
    {
        var content = CreateContent(methodName, request, files);       
        var response = _httpClient.PostAsync("jsonrpc", content).GetAwaiter().GetResult();
        var jsonResponse = response.Content.ReadAsStringAsync().GetAwaiter().GetResult();
        var jsonRpcResponse = JsonConvert.DeserializeObject<JsonRpcResponse<T>>(jsonResponse);
        return jsonRpcResponse.Result;
    }

    public async Task<T> SendAsync<T>(string methodName, object request, IEnumerable<File> files = null)
    {
        var content = CreateContent(methodName, request, files);
        var response = await _httpClient.PostAsync("jsonrpc", content); 
        var jsonResponse = await response.Content.ReadAsStringAsync();
        var jsonRpcResponse = JsonConvert.DeserializeObject<JsonRpcResponse<T>>(jsonResponse);
        return jsonRpcResponse.Result;
    }
}

[JsonObject]
internal class JsonRpcResponse<T>
{
    [JsonProperty("id")]
    public string Id { get; set; }

    [JsonProperty("jsonrpc")]
    public string JsonRpcVersion { get; private set; } = "2.0";

    [JsonProperty("result")]
    public T Result { get; set; }

    [JsonProperty("error", NullValueHandling = NullValueHandling.Ignore)]
    public JsonRpcError Error { get; set; }
}

internal class JsonRpcError
{
    [JsonProperty("code", Required = Required.Always)]
    public int Code { get; set; }

    [JsonProperty("message", Required = Required.Always)]
    public string Message { get; set; }

    [JsonProperty("data")]
    public object Data { get; set; }
}

[DebuggerStepThrough]
public class {{Name}}Client : I{{Name}}Client
{
    private readonly JsonRpcClient _jsonRpcClient;

    {{#Services}}
    public I{{Name}}Client {{Name}} { get; }
    {{/Services}}

    public {{Name}}Client(System.Net.Http.HttpClient httpClient)
    {
        _jsonRpcClient = new JsonRpcClient(httpClient);

        {{#Services}}
        {{Name}} = new {{Name}}Client(_jsonRpcClient);
        {{/Services}}
    }
}

{{#Services}}
[DebuggerStepThrough]
internal class {{Name}}Client(JsonRpcClient jsonRpcClient) : I{{Name}}Client
{    
    {{#Operations}}
    {{#if IsFileRequest}}
    public async Task<{{ResponseType}}>{{Request}}Async({{Request}} request, params File[] files) => await jsonRpcClient.SendAsync<{{ResponseType}}>("{{JsonRpcMethod}}", request, files.ToArray());
    {{else}}
    public async Task<{{ResponseType}}>{{Request}}Async({{Request}} request) => await jsonRpcClient.SendAsync<{{ResponseType}}>("{{JsonRpcMethod}}", request);
    {{/if}}
    {{/Operations}}

    {{#Operations}}
    {{#if IsFileRequest}}
    public {{ResponseType}} {{Request}}({{Request}} request, params File[] files) => jsonRpcClient.Send<{{ResponseType}}>("{{JsonRpcMethod}}", request, files.ToArray());
    {{else}}
    public {{ResponseType}} {{Request}}({{Request}} request) => jsonRpcClient.Send<{{ResponseType}}>("{{JsonRpcMethod}}", request);    
    {{/if}}
    {{/Operations}}
}

{{/Services}}

public readonly struct Unit : IEquatable<Unit>, IComparable<Unit>, IComparable
{
    private static readonly Unit _value = new();    
    public static ref readonly Unit Value => ref _value;
    
    public static Task<Unit> Task { get; } = System.Threading.Tasks.Task.FromResult(_value);
    
    public int CompareTo(Unit other) => 0;    

    int IComparable.CompareTo(object? obj) => 0;    

    public override int GetHashCode() => 0;
    
    public bool Equals(Unit other) => true;
    
    public override bool Equals(object? obj) => obj is Unit;
    
    public static bool operator ==(Unit first, Unit second) => true;
    
    public static bool operator !=(Unit first, Unit second) => false;
    
    public override string ToString() => "()";
}